---
version: '{branch}-{build}'
skip_tags: true
max_jobs: 1
image:
  - Visual Studio 2017
  - Ubuntu1804

configuration:
  - release-fastbuild
  - release
#  - debug

platform:
# Disable x86 builds since we only get one concurrent build on AppVeyor and x86
# failures will be caught by Jenkins.
#  - x86
  - x64


matrix:
  exclude:
    # Ubuntu doesn't support "release-fastbuild".
    - image: Ubuntu1804
      configuration: release-fastbuild
    # We only want "release-fastbuild" for Windows since "release" consumes too
    # much memory due to link-time code generation / whole-program optimization.
    - image: Visual Studio 2017
      configuration: release

skip_commits:
  files:
    - doc/
    - LICENCE
    - README
    - README.md
    - CHANGELOG
    - COPYING
    - CODE_OF_CONDUCT.md

for:

########## UBUNTU SPECIFIC CONFIGURATION ##########
-
  matrix:
    only:
      - image: Ubuntu1804

  clone_folder: /home/appveyor/projects/mixxx

  install:
    - sudo apt-get update
    - sudo apt-get -y install gdb libavformat-dev libchromaprint-dev libfaad-dev libflac-dev libid3tag0-dev libmad0-dev libmodplug-dev libmp3lame-dev libmp4v2-dev libopus-dev libopusfile-dev libportmidi-dev libprotobuf-dev libqt5opengl5-dev libqt5sql5-sqlite libqt5svg5-dev librubberband-dev libshout3-dev libsndfile1-dev libsqlite3-dev libtag1-dev libupower-glib-dev libusb-1.0-0-dev libwavpack-dev portaudio19-dev protobuf-compiler qt5-default qtscript5-dev libqt5x11extras5-dev cmake qt5keychain-dev liblilv-dev libsoundtouch-dev

  build_script:
    - export CMAKE_BUILD_PARALLEL_LEVEL="$(nproc)"
    - mkdir cmake_build
    - cd cmake_build
    - cmake -DMAD_ENABLED=ON -DFAAD_ENABLED=ON -DOPUS_ENABLED=ON -DMODPLUG_ENABLED=ON -DWAVPACK_ENABLED=ON -DHSS1394_ENABLED=OFF -DLOCALECOMPARE_ENABLED=ON ..
    - cmake --build .
    - sudo cmake --build . --target install

  test_script:
    - cmake --build . --target mixxx-test
    - export GTEST_COLOR=1 CTEST_OUTPUT_ON_FAILURE=1
    - xvfb-run -- cmake --build . --target test
    - xvfb-run -- cmake --build . --target benchmark

########## END UBUNTU SPECIFIC CONFIGURATION ##########

########## WINDOWS SPECIFIC CONFIGURATION ##########
-
  matrix:
    only:
      - image: Visual Studio 2017
    fast_finish: false     # set this flag to true to immediately finish build once one of the jobs fails.

  init:
    - git config --global core.autocrlf input
# Uncomment the following line to show RDP info at beginning of job
#    - ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))

  clone_folder: c:\projects\mixxx

  cache:
    - C:\mixxx-buildserver

  environment:
    ENVIRONMENTS_URL: https://downloads.mixxx.org/builds/buildserver/2.3.x-windows/
    ENVIRONMENTS_PATH: C:\mixxx-buildserver
    ENVIRONMENT_NAME: 2.3-j00013-PLATFORM-CONFIGURATION-static-36f44bd2-minimal
    QT_VERSION: 5.12.0


  install:
    - set ENVIRONMENT_NAME=%%ENVIRONMENT_NAME:PLATFORM=%platform%%%
    - set ENVIRONMENT_NAME=%%ENVIRONMENT_NAME:CONFIGURATION=%configuration%%%
    - set WINLIB_PATH=%ENVIRONMENTS_PATH%\%ENVIRONMENT_NAME%
    - IF EXIST %WINLIB_PATH% (
        echo Using cached environment %WINLIB_PATH%...
      ) else (
        mkdir %ENVIRONMENTS_PATH% &&
        echo Downloading environment %ENVIRONMENT_NAME%... &&
        curl -fsS -L -o%ENVIRONMENTS_PATH%\%ENVIRONMENT_NAME%.zip %ENVIRONMENTS_URL%/%ENVIRONMENT_NAME%.zip &&
        echo Unpacking environment %ENVIRONMENT_NAME% to %ENVIRONMENTS_PATH%... &&
        7z -o%ENVIRONMENTS_PATH% x %ENVIRONMENTS_PATH%\%ENVIRONMENT_NAME%.zip || exit 1
      )

  before_build:
    - set QT_PATH=%WINLIB_PATH%\Qt-%QT_VERSION%
    - set CMAKE_BUILD_PARALLEL_LEVEL=%NUMBER_OF_CORES%
    - cd %APPVEYOR_BUILD_FOLDER%

  build_script:
    - mkdir cmake_build
    - cd cmake_build
    - cmake
      -DCMAKE_INSTALL_PREFIX=C:\mixxx
      -DCMAKE_PREFIX_PATH=%WINLIB_PATH%;%QT_PATH%
      -DCMAKE_FIND_LIBRARY_PREFIXES=lib;
      -DMEDIAFOUNDATION_ENABLED=ON
      -DOPUS_ENABLED=ON
      -DLOCALECOMPARE_ENABLED=ON
      ..
    - cmake --build .
    - cmake --build . --target mixxx-test
    - cmake --build . --target install
    - cd ..

  test_script:
    # Calling mixxx-test under bash to have standard output and use stdbuf to
    # unbuffer standard & error output
    - cmake --build cmake_build --target test
    - cmake --build cmake_build --target benchmark

  artifacts:
    - path: '*.exe'
    - path: '*.msi'

  on_finish:
    # Uncomment the following line if you don't want the build VM to be destroyed
    # and be able to RDP on it until a special “lock” file on VM desktop is deleted
    # The RDP session is limited by overall build time (60 min).
    # - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))

########## END WINDOWS SPECIFIC CONFIGURATION ##########


on_success:
  - echo "*** SUCCESS ***"

on_failure:
  - echo "*** FAILURE ***"

on_finish:
  - echo "*** DONE ***"

deploy:
  - provider: Environment
    name: downloads.mixxx.org

notifications:
  - provider: Webhook
    url: https://mixxx.zulipchat.com/api/v1/messages
    method: POST
    content_type: application/x-www-form-urlencoded
    headers:
      Authorization:
        secure: 95cbVBcC4rogjE5VNdhuYm8cnjPF8+7SeQXySqcxAqrFZxK+/Kcn3Q2hRb2iZfUEKZ+EdCYwx7EbpZdSiZc5goAuJT+/QXXT/Ls+fzc+eSy4Sz1Ic5t2BjLhmYZLdnBL3uIVceNSb8GzYPQx0+xy7g==
    on_build_success: true
    on_build_failure: true
    on_build_status_changed: true
    body: "type=stream&to=appveyor&subject={{projectName}} Build {{buildVersion}} {{status}}&content=Build {{buildVersion}} {{status}}{{#isPullRequest}} (PR #{{pullRequestId}}) {{/isPullRequest}}{{#failed}} :cross_mark:{{/failed}}{{#passed}} :check_mark:{{/passed}} {{buildUrl}}"
